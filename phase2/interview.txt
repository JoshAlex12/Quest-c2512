Interview questions

------------------------------------------------------------------------------------------------------------------------

1. What all topics did we study in each phase. 
    Phase 1:
    Phase 2: 

------------------------------------------------------------------------------------------------------------------------
2. Write a C++ program to store employee details. And 3 functions, Add, Display, Remove. Using structure array as data member. 

    #include <iostream>
    #include <string>

    using namespace std;

    struct Employee {
        int id;
        string name;
        string position;
    };

    class EmployeeManager {
    private:
        Employee employees[100];
        int count;

    public:
        EmployeeManager() : count(0) {}

        void Add() {
            if (count < 100) {
                cout << "Enter Employee ID: ";
                cin >> employees[count].id;
                cout << "Enter Employee Name: ";
                cin >> employees[count].name;
                cout << "Enter Employee Position: ";
                cin >> employees[count].position;
                count++;
            } else {
                cout << "Employee list is full." << endl;
            }
        }

        void Display() {
            for (int i = 0; i < count; i++) {
                cout << "ID: " << employees[i].id << ", Name: " << employees[i].name 
                    << ", Position: " << employees[i].position << endl;
            }
        }

        void Remove(int id) {
            for (int i = 0; i < count; i++) {
                if (employees[i].id == id) {
                    for (int j = i; j < count - 1; j++) {
                        employees[j] = employees[j + 1];
                    }
                    count--;
                    cout << "Employee with ID " << id << " removed." << endl;
                    return;
                }
            }
            cout << "Employee not found." << endl;
        }
    };

    int main() {
        EmployeeManager manager;
        int choice, id;

        while (true) {
            cout << "1. Add Employee\n2. Display Employees\n3. Remove Employee\n4. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    manager.Add();
                    break;
                case 2:
                    manager.Display();
                    break;
                case 3:
                    cout << "Enter Employee ID to remove: ";
                    cin >> id;
                    manager.Remove(id);
                    break;
                case 4:
                    return 0;
                default:
                    cout << "Invalid choice. Please try again." << endl;
            }
        }
    }

------------------------------------------------------------------------------------------------------------------------
3. /*---MFC---*/Asked about all the files in MFC, what is the use of every file. Flow of MFC execution. What is OnPaint(), InitDialog(), CAboutDlg, etc. 
------------------------------------------------------------------------------------------------------------------------
4. We have a Base class with a member function display() which will print "A" when called. And a Derived class ( from Base ) which has another display() function which will print "B". (There is no virtual class used in code). We made an object of Derived, using the object of Derived class we need to print both "A" of base class and "B" of Derived class. We can update the class part and cannot update the int main(). How to display both. 
------------------------------------------------------------------------------------------------------------------------
5. Write a program to replace all spaces in a given string with underscores using a loop.
    #include <iostream>
    #include <string>

    int main() {
        std::string input;
        std::cout << "Enter a string: ";
        std::getline(std::cin, input);

        for (size_t i = 0; i < input.length(); ++i) {
            if (input[i] == ' ') {
                input[i] = '_';
            }
        }

        std::cout << "Modified string: " << input << std::endl;
        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
6. Design a base class Vehicle and derived classes Car and Bike. Override a function to show specific vehicle details using runtime polymorphism.
    #include <iostream>
    using namespace std;

    class Vehicle {
    public:
        virtual void showDetails() {
            cout << "This is a vehicle." << endl;
        }
    };

    class Car : public Vehicle {
    public:
        void showDetails() override {
            cout << "This is a car." << endl;
        }
    };

    class Bike : public Vehicle {
    public:
        void showDetails() override {
            cout << "This is a bike." << endl;
        }
    };

    int main() {
        Vehicle* v1 = new Car();
        Vehicle* v2 = new Bike();

        v1->showDetails();
        v2->showDetails();

        delete v1;
        delete v2;

        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
7. Explain static functions in C++ with examples.
    #include <iostream>

    class Example {
    public:
        static void staticFunction() {
            std::cout << "This is a static function." << std::endl;
        }

        void nonStaticFunction() {
            std::cout << "This is a non-static function." << std::endl;
        }
    };

    int main() {
        // Calling static function without creating an object
        Example::staticFunction();

        // Creating an object to call non-static function
        Example obj;
        obj.nonStaticFunction();

        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
8. Provide an example of operator overloading in C++.
    #include <iostream>

    class Complex {
    private:
        float real;
        float imag;

    public:
        Complex(float r = 0, float i = 0) : real(r), imag(i) {}

        // Overloading the + operator
        Complex operator+(const Complex& obj) {
            return Complex(real + obj.real, imag + obj.imag);
        }

        void display() {
            std::cout << real << " + " << imag << "i" << std::endl;
        }
    };

    int main() {
        Complex c1(3.5, 2.5);
        Complex c2(1.5, 4.5);
        Complex c3 = c1 + c2; // Using overloaded + operator

        c3.display(); // Output: 5.0 + 7.0i
        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
9. Explain oops concepts.
------------------------------------------------------------------------------------------------------------------------
10. What is abstraction and implement it in  the code.
    #include <iostream>
    using namespace std;

    class Shape {
    public:
        virtual void draw() = 0; // Pure virtual function
    };

    class Circle : public Shape {
    public:
        void draw() {
            cout << "Drawing a Circle" << endl;
        }
    };

    class Square : public Shape {
    public:
        void draw() {
            cout << "Drawing a Square" << endl;
        }
    };

    int main() {
        Shape* shape1 = new Circle();
        Shape* shape2 = new Square();

        shape1->draw();
        shape2->draw();

        delete shape1;
        delete shape2;

        return 0;
    }
------------------------------------------------------------------------------------------------------------------------
11. Explain about virtual function, run time polymorphism.
    #include <iostream>
    using namespace std;

    class Base {
    public:
        virtual void show() {
            cout << "Base class show function called." << endl;
        }
    };

    class Derived : public Base {
    public:
        void show() override {
            cout << "Derived class show function called." << endl;
        }
    };

    int main() {
        Base* b;           // Base class pointer
        Derived d;        // Derived class object
        b = &d;           // Pointing to Derived class object

        b->show();        // Calls Derived's show() due to run-time polymorphism

        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
12. Usage of public, private, protected in the code.
    #include <iostream>
    using namespace std;

    class Base {
    protected:
        int protectedVar;

    public:
        Base() : protectedVar(10) {}

        void showProtected() {
            cout << "Protected Variable: " << protectedVar << endl;
        }
    };

    class Derived : public Base {
    private:
        int privateVar;

    public:
        Derived() : privateVar(20) {}

        void showPrivate() {
            cout << "Private Variable: " << privateVar << endl;
        }

        void showAll() {
            showProtected();
            showPrivate();
        }
    };

    int main() {
        Derived obj;
        obj.showAll();
        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
13. Explain about STL.
------------------------------------------------------------------------------------------------------------------------
14. Explain Friend function and how it is implemented in the code.
    # Friend Function in C++

    #include <iostream>
    using namespace std;

    class Box {
    private:
        int length;

    public:
        Box(int l) : length(l) {}

        // Friend function declaration
        friend void printLength(Box box);
    };

    // Friend function definition
    void printLength(Box box) {
        cout << "Length of box: " << box.length << endl;
    }

    int main() {
        Box box(10);
        printLength(box);
        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
15. What is typedef and write syntax.
    typedef existing_type new_type_name;

------------------------------------------------------------------------------------------------------------------------
16. Explain Data structure.
------------------------------------------------------------------------------------------------------------------------
17. Stack and queue
    #include <iostream>
    #include <stack>
    #include <queue>

    int main() {
        // Stack example
        std::stack<int> myStack;
        myStack.push(1);
        myStack.push(2);
        myStack.push(3);
        
        std::cout << "Stack elements: ";
        while (!myStack.empty()) {
            std::cout << myStack.top() << " ";
            myStack.pop();
        }
        std::cout << std::endl;

        // Queue example
        std::queue<int> myQueue;
        myQueue.push(1);
        myQueue.push(2);
        myQueue.push(3);
        
        std::cout << "Queue elements: ";
        while (!myQueue.empty()) {
            std::cout << myQueue.front() << " ";
            myQueue.pop();
        }
        std::cout << std::endl;

        return 0;
    }

------------------------------------------------------------------------------------------------------------------------
18. What is the difference between Structure and class in CPP.
------------------------------------------------------------------------------------------------------------------------
19. Use of abstraction. How to make a class abstract and what is its use.
------------------------------------------------------------------------------------------------------------------------
20. Real time example for oops concepts.
------------------------------------------------------------------------------------------------------------------------
